-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.3
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity madd is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    A_empty_n : IN STD_LOGIC;
    A_read : OUT STD_LOGIC;
    B_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_empty_n : IN STD_LOGIC;
    B_read : OUT STD_LOGIC;
    C_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_full_n : IN STD_LOGIC;
    C_write : OUT STD_LOGIC );
end;


architecture behav of madd is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "madd,hls_ip_2016_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=7.000001,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.394000,HLS_SYN_LAT=1035,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=418,HLS_SYN_LUT=474}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal A_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal exitcond_flatten_reg_94 : STD_LOGIC_VECTOR (0 downto 0);
    signal B_blk_n : STD_LOGIC;
    signal C_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_pipeline_reg_pp0_iter9_exitcond_flatten_reg_94 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_67 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond_flatten_fu_82_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal ap_block_state12 : BOOLEAN;
    signal ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_94 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_94 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_94 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter4_exitcond_flatten_reg_94 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter5_exitcond_flatten_reg_94 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter6_exitcond_flatten_reg_94 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter7_exitcond_flatten_reg_94 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter8_exitcond_flatten_reg_94 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_88_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal A_read_reg_103 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_read_reg_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_78_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_113 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal grp_fu_78_ce : STD_LOGIC;
    signal ap_CS_fsm_state13 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_pp0 : BOOLEAN;

    component madd_fadd_32ns_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    madd_fadd_32ns_32bkb_U0 : component madd_fadd_32ns_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => A_read_reg_103,
        din1 => B_read_reg_108,
        ce => grp_fu_78_ce,
        dout => grp_fu_78_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter10) and (ap_const_boolean_1 = ap_block_state12)))) and not((ap_const_lv1_0 = exitcond_flatten_fu_82_p2)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_const_logic_0 = ap_start)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter10) and (ap_const_boolean_1 = ap_block_state12)))) and (ap_const_lv1_0 = exitcond_flatten_fu_82_p2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                elsif ((((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_const_logic_0 = ap_start))) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter10) and (ap_const_boolean_1 = ap_block_state12)))) and not((ap_const_lv1_0 = exitcond_flatten_fu_82_p2))))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter10) and (ap_const_boolean_1 = ap_block_state12))))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_const_logic_0 = ap_start)))) then 
                    ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter10) and (ap_const_boolean_1 = ap_block_state12))))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter10) and (ap_const_boolean_1 = ap_block_state12))))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter10) and (ap_const_boolean_1 = ap_block_state12))))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter10) and (ap_const_boolean_1 = ap_block_state12))))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter10) and (ap_const_boolean_1 = ap_block_state12))))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter10) and (ap_const_boolean_1 = ap_block_state12))))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter10) and (ap_const_boolean_1 = ap_block_state12))))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter10) and (ap_const_boolean_1 = ap_block_state12))))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_67_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter10) and (ap_const_boolean_1 = ap_block_state12)))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_flatten_fu_82_p2))) then 
                indvar_flatten_reg_67 <= indvar_flatten_next_fu_88_p2;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_const_logic_0 = ap_start)))) then 
                indvar_flatten_reg_67 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_94 = ap_const_lv1_0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter10) and (ap_const_boolean_1 = ap_block_state12)))))) then
                A_read_reg_103 <= A_dout;
                B_read_reg_108 <= B_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter10) and (ap_const_boolean_1 = ap_block_state12)))))) then
                ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_94 <= exitcond_flatten_reg_94;
                exitcond_flatten_reg_94 <= exitcond_flatten_fu_82_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter10) and (ap_const_boolean_1 = ap_block_state12))))) then
                ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_94 <= ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_94;
                ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_94 <= ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_94;
                ap_pipeline_reg_pp0_iter4_exitcond_flatten_reg_94 <= ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_94;
                ap_pipeline_reg_pp0_iter5_exitcond_flatten_reg_94 <= ap_pipeline_reg_pp0_iter4_exitcond_flatten_reg_94;
                ap_pipeline_reg_pp0_iter6_exitcond_flatten_reg_94 <= ap_pipeline_reg_pp0_iter5_exitcond_flatten_reg_94;
                ap_pipeline_reg_pp0_iter7_exitcond_flatten_reg_94 <= ap_pipeline_reg_pp0_iter6_exitcond_flatten_reg_94;
                ap_pipeline_reg_pp0_iter8_exitcond_flatten_reg_94 <= ap_pipeline_reg_pp0_iter7_exitcond_flatten_reg_94;
                ap_pipeline_reg_pp0_iter9_exitcond_flatten_reg_94 <= ap_pipeline_reg_pp0_iter8_exitcond_flatten_reg_94;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter10) and (ap_const_boolean_1 = ap_block_state12)))) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter8_exitcond_flatten_reg_94))) then
                tmp_3_reg_113 <= grp_fu_78_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter10, exitcond_flatten_fu_82_p2, ap_block_state3, ap_block_state12, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter9)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_const_logic_0 = ap_start))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter10) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter10) and (ap_const_boolean_1 = ap_block_state12)))) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter9)))) and not((not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter10) and (ap_const_boolean_1 = ap_block_state12)))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((ap_const_lv1_0 = exitcond_flatten_fu_82_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_logic_1 = ap_enable_reg_pp0_iter10) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter10) and (ap_const_boolean_1 = ap_block_state12)))) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter9))) or (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter10) and (ap_const_boolean_1 = ap_block_state12)))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((ap_const_lv1_0 = exitcond_flatten_fu_82_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    A_blk_n_assign_proc : process(A_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_94)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_94 = ap_const_lv1_0))) then 
            A_blk_n <= A_empty_n;
        else 
            A_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    A_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_94, ap_enable_reg_pp0_iter10, ap_block_state3, ap_block_state12)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_94 = ap_const_lv1_0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter10) and (ap_const_boolean_1 = ap_block_state12)))))) then 
            A_read <= ap_const_logic_1;
        else 
            A_read <= ap_const_logic_0;
        end if; 
    end process;


    B_blk_n_assign_proc : process(B_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_94)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_94 = ap_const_lv1_0))) then 
            B_blk_n <= B_empty_n;
        else 
            B_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    B_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_94, ap_enable_reg_pp0_iter10, ap_block_state3, ap_block_state12)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_94 = ap_const_lv1_0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter10) and (ap_const_boolean_1 = ap_block_state12)))))) then 
            B_read <= ap_const_logic_1;
        else 
            B_read <= ap_const_logic_0;
        end if; 
    end process;


    C_blk_n_assign_proc : process(C_full_n, ap_enable_reg_pp0_iter10, ap_pipeline_reg_pp0_iter9_exitcond_flatten_reg_94)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter10) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter9_exitcond_flatten_reg_94))) then 
            C_blk_n <= C_full_n;
        else 
            C_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    C_din <= tmp_3_reg_113;

    C_write_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter10, ap_pipeline_reg_pp0_iter9_exitcond_flatten_reg_94, ap_block_state3, ap_block_state12)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter10) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter9_exitcond_flatten_reg_94) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter10) and (ap_const_boolean_1 = ap_block_state12)))))) then 
            C_write <= ap_const_logic_1;
        else 
            C_write <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state13 <= ap_CS_fsm(2 downto 2);

    ap_block_state12_assign_proc : process(C_full_n, ap_pipeline_reg_pp0_iter9_exitcond_flatten_reg_94)
    begin
                ap_block_state12 <= ((ap_const_lv1_0 = ap_pipeline_reg_pp0_iter9_exitcond_flatten_reg_94) and (ap_const_logic_0 = C_full_n));
    end process;


    ap_block_state3_assign_proc : process(A_empty_n, B_empty_n, exitcond_flatten_reg_94)
    begin
                ap_block_state3 <= (((exitcond_flatten_reg_94 = ap_const_lv1_0) and (ap_const_logic_0 = A_empty_n)) or ((exitcond_flatten_reg_94 = ap_const_lv1_0) and (ap_const_logic_0 = B_empty_n)));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_lv1_1 = ap_CS_fsm_state13)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
                ap_enable_pp0 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) or (ap_enable_reg_pp0_iter1 = ap_const_logic_1) or (ap_enable_reg_pp0_iter2 = ap_const_logic_1) or (ap_enable_reg_pp0_iter3 = ap_const_logic_1) or (ap_enable_reg_pp0_iter4 = ap_const_logic_1) or (ap_enable_reg_pp0_iter5 = ap_const_logic_1) or (ap_enable_reg_pp0_iter6 = ap_const_logic_1) or (ap_enable_reg_pp0_iter7 = ap_const_logic_1) or (ap_enable_reg_pp0_iter8 = ap_const_logic_1) or (ap_enable_reg_pp0_iter9 = ap_const_logic_1) or (ap_enable_reg_pp0_iter10 = ap_const_logic_1));
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_lv1_1 = ap_CS_fsm_state13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    exitcond_flatten_fu_82_p2 <= "1" when (indvar_flatten_reg_67 = ap_const_lv11_400) else "0";

    grp_fu_78_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter10, ap_block_state3, ap_block_state12)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter10) and (ap_const_boolean_1 = ap_block_state12)))))) then 
            grp_fu_78_ce <= ap_const_logic_1;
        else 
            grp_fu_78_ce <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next_fu_88_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_67) + unsigned(ap_const_lv11_1));
end behav;
